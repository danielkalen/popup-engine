// Generated by CoffeeScript 1.11.1
(function($) {
  var Popup, markup, styles;
  styles = {
    popup: "position: absolute; z-index: 3000; top: 0; left: 0; width: 100vw; min-height: 100%; visibility: hidden; opacity: 0; transition: all 0.4s;",
    popupContent: "position: absolute; left: 50%; top: 50%; -webkit-transform: translate3d(-50%, -50%, 0); -moz-transform: translate3d(-50%, -50%, 0); -ms-transform: translate3d(-50%, -50%, 0); -o-transform: translate3d(-50%, -50%, 0); transform: translate3d(-50%, -50%, 0); margin: 0 auto;",
    popupOverlay: "position: fixed; left: 0; top: 0; width: 100vw; min-height: 100vh; background-color: rgba(0,0,0,0.88);"
  };
  styles.popupStateOpen = styles.popup.replace('opacity: 0', 'opacity: 1').replace('visibility: hidden', 'visibility: visible');
  markup = {
    popup: "<div class='Popup' style='" + styles.popup + "'></div>",
    popupContent: "<div class='Popup-content' style='" + styles.popupContent + "'></div>",
    popupOverlay: "<div class='Popup-overlay' style='" + styles.popupOverlay + "'></div>",
    popupClose: "<div class='Popup-close'></div>"
  };

  /**
  	 * The class used by popup instances of all kinds. This includes exit intents,
  	 * quote popups, screenshot lightboxes, etc.
  	 * 
  	 * @param {object} popup$ jQuery object containing the form/dom element to be inserted into the popup.
  	 * @param {string} name  Unique name to be used as the ID of the popup.
   */
  Popup = function(popup$, name) {
    this.name = name || 'popup_' + Math.floor(Math.random() * 100000);
    this.form = popup$.data('Form') || popup$.children('form').data('Form');
    this.el = $(markup.popup).attr('id', name);
    this.overlayEl = $(markup.popupOverlay).appendTo(this.el);
    this.closeEl = $(markup.popupClose).appendTo(this.el);
    this.contentEl = $(markup.popupContent).appendTo(this.el);
    this.options = {
      'closeOnEsc': true
    };
    this.isExitIntent = name.includes('exit-intent');
    this.isOpen = false;
    this.appendToDOM(popup$);
    this.attachEvents();
    return Popup.instances[this.name] = this;
  };
  Popup.version = '2.2.1';
  Popup.instances = {};
  Popup.isOpen = false;
  Popup.prototype.appendToDOM = function(popup$) {
    appendPopup();
    this.el.prependTo(document.body);
    return popup$.first().appendTo(this.contentEl);
  };
  Popup.prototype.attachEvents = function() {
    this.closeEl.add(this.overlayEl).on('click', (function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    return $(document).on("keyup." + this.name, (function(_this) {
      return function(event) {
        if (event.which === 27 && _this.isOpen && _this.options.closeOnEsc) {
          event.stopPropagation();
          event.preventDefault();
          return _this.close();
        }
      };
    })(this));
  };
  Popup.prototype.detachEvents = function() {
    this.overlayEl.off("click." + this.name);
    return $(document).off("keyup." + this.name);
  };
  Popup.prototype.close = function() {
    if (this.isOpen) {
      this.el.removeClass('show').addClass('hiding');
      [0].style = styles.popup;
      setTimeout((function(_this) {
        return function() {
          return _this.el.removeClass('hiding');
        };
      })(this), 1000);
      $(document.body).removeClass('opened-popup');
      Popup.isOpen = this.isOpen = false;
      return this.el.trigger('closed');
    }
  };
  Popup.prototype.open = function() {
    if (!Popup.isOpen || this.isExitIntent) {
      if (this.isExitIntent) {
        $('.popup').removeClass('show');
      }
      if (this.el.find('.results').hasClass('show')) {
        this.el.addClass('show');
      } else {
        this.el.addClass('show').find('.step').first().addClass('show');
      }
      this.el[0].style = styles.popupStateOpen;
      $(document.body).addClass('opened-popup');
      Popup.isOpen = this.isOpen = true;
      return this.el.trigger('opened');
    }
  };
  Popup.prototype.reset = function() {
    if (this.form) {
      this.form.Restart(true, true);
    }
    return this.el.trigger('reset');
  };
  Popup.prototype.destroy = function() {
    this.close();
    this.detachEvents();
    this.el.remove();
    return delete Popup.instances[this.name];
  };
  Popup.prototype.replaceWith = function(el$) {
    return this.contentEl.html(el$);
  };
  Popup.prototype.Open = Popup.prototype.open;
  Popup.prototype.Close = Popup.prototype.close;
  Popup.prototype.Reset = Popup.prototype.reset;
  Popup.prototype.restart = Popup.prototype.reset;
  Popup.prototype.Destroy = Popup.prototype.destroy;
  return window.Popup = Popup;
})(jQuery);
