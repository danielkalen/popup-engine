// Generated by CoffeeScript 1.10.0
(function($) {
  var $popupOverlay;
  window.popupOpen = false;
  window.appendPopup = function() {
    if ($('.popup-overlay').length === 0) {
      return $(document.documentElement).prepend('<div class="popup-overlay"></div>');
    }
  };
  appendPopup();
  $popupOverlay = $('.popup-overlay');

  /**
  	 * The class used by popup instances of all kinds. This includes exit intents,
  	 * quote popups, screenshot lightboxes, etc.
  	 * 
  	 * @param {object} $popup jQuery object containing the form/dom element to be inserted into the popup.
  	 * @param {string} name  Unique name to be used as the ID of the popup.
   */
  return this.Popup = function($popup, name) {
    var isExitIntent;
    this.name = name || 'popup_' + Math.floor(Math.random() * 100000);
    this.form = $popup.data('Form') || $popup.children('form').data('Form');
    this.el = $("<div class='popup' id='" + name + "'><div class='popup-close'></div><div class='popup-content'></div></div>");
    this.Popup = this.el;
    isExitIntent = name.includes('exit-intent');
    this.el.insertAfter($popupOverlay);

    /**
    		 * Closes the popup on demand and hides the overlay that belongs to @ instance.
     */
    this.close = function() {
      var popupOpen;
      this.el.addClass('hiding').removeClass('show');
      setTimeout((function(_this) {
        return function() {
          return _this.el.removeClass('hiding');
        };
      })(this), 1000);
      $popupOverlay.removeClass("show belongs_to_" + this.name);
      $(document.documentElement).removeClass('opened-popup');
      popupOpen = false;
      return this.el.trigger('closed');
    };

    /**
    		 * Opens the popup on demand only if no other popup is open (unless an exit intent needs to open).
     */
    this.open = function() {
      var popupOpen;
      if (!popupOpen || isExitIntent) {
        $popupOverlay.addClass("show belongs_to_" + this.name);
        if (isExitIntent) {
          $('.popup').removeClass('show');
        }
        if (this.el.find('.results').hasClass('show')) {
          this.el.addClass('show');
        } else {
          this.el.addClass('show').find('.step').first().addClass('show');
        }
        $(document.documentElement).addClass('opened-popup');
      }
      if (popupOpen && !isExitIntent) {
        log('Another popup is open.');
      }
      if (typeof disableExitIntents === "function") {
        disableExitIntents();
      }
      popupOpen = true;
      return this.el.trigger('opened');
    };

    /**
    		 * Resets all of the input fields inside any forms that are inside the popup and sets the
    		 * first step of the popup to visible.
     */
    this.reset = function() {
      this.form.Restart(true, true);
      return this.el.trigger('reset');
    };
    this.restart = this.reset;

    /**
    		 * Detroys the popup instance.
     */
    this.destroy = function() {
      return this.el.remove();
    };
    this.replaceWith = function($el) {
      return this.el.children('.popup-content').html($el);
    };
    $popup.first().appendTo(this.el.find('.popup-content'));
    this.el.children('.popup-close').on('click', (function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    $popupOverlay.on('click', function() {
      var popupOpen;
      setTimeout((function(_this) {
        return function() {
          return $(_this).removeClass("show belongs_to_" + name);
        };
      })(this), 0);
      $('.popup.show').removeClass('show');
      $(document.documentElement).removeClass('opened-popup');
      return popupOpen = false;
    });
    this.Close = this.close;
    this.Open = this.open;
    this.Reset = this.reset;
    this.Destroy = this.destroy;
    return this;
  };
})(jQuery);
