// Generated by CoffeeScript 1.11.1
(function($) {
  var Popup, applyStyles, bodyWrapper$, defaultOptions, getDocumentOffset, getScrollOffset, markup, styles, stylesOpenState;
  defaultOptions = {
    'closeOnEsc': true,
    'centerPopup': true
  };
  styles = {
    popup: "position: absolute; z-index: 3000; top: 0; left: 0; width: 100vw; min-height: 100%; visibility: hidden; opacity: 0; transition: all 0.3s;",
    popupContent: "position: absolute; left: 50%; -webkit-transform: translate3d(-50%, 0, 0); -moz-transform: translate3d(-50%, 0, 0); -ms-transform: translate3d(-50%, 0, 0); -o-transform: translate3d(-50%, 0, 0); transform: translate3d(-50%, 0, 0); margin: 0 auto;",
    popupOverlay: "position: fixed; left: 0; top: 0; width: 100vw; min-height: 100vh; background-color: rgba(0,0,0,0.88);"
  };
  stylesOpenState = {
    popup: (function() {
      return styles.popup.replace('opacity: 0', 'opacity: 1').replace('visibility: hidden', 'visibility: visible');
    })(),
    bodyWrapper: "position: fixed; width: 100%; top: {{topOffset}}px;"
  };
  markup = {
    popup: "<div class='Popup' style='" + styles.popup + "'></div>",
    popupContent: "<div class='Popup-content' style='" + styles.popupContent + "'></div>",
    popupOverlay: "<div class='Popup-overlay' style='" + styles.popupOverlay + "'></div>",
    popupClose: "<div class='Popup-close'></div>",
    bodyWrapper: "<div class='bodyInnerwrap'></div>"
  };
  getScrollOffset = function() {
    return window.scrollY - getDocumentOffset();
  };
  getDocumentOffset = function() {
    var ref;
    return (((ref = document.documentElement.getBoundingClientRect()) != null ? ref.top : void 0) || 0) + window.scrollY;
  };
  applyStyles = function(el, styleObject) {
    var key, value;
    for (key in styleObject) {
      value = styleObject[key];
      (el[0] || el).style[key] = value;
    }
    return el;
  };

  /**
  	 * The class used by popup instances of all kinds. This includes exit intents,
  	 * quote popups, screenshot lightboxes, etc.
  	 * 
  	 * @param {object} targetEl$  jQuery object containing the form/dom element to be inserted into the popup.
  	 * @param {string} name       Unique name to be used as the ID of the popup.
   */
  Popup = function(targetEl$, name, options) {
    this.name = name || 'popup_' + Math.floor(Math.random() * 100000);
    this.form = targetEl$.data('Form') || targetEl$.children('form').data('Form');
    this.el = $(markup.popup).attr('id', name);
    this.overlayEl = $(markup.popupOverlay).appendTo(this.el);
    this.closeEl = $(markup.popupClose).appendTo(this.el);
    this.contentEl = $(markup.popupContent).appendTo(this.el);
    this.options = {
      'closeOnEsc': true
    };
    this.options = $.extend(true, {}, options, defaultOptions);
    this.isExitIntent = name.includes('exit-intent');
    this.isOpen = false;
    this.scrollOffset = 0;
    this.appendToDOM(targetEl$);
    this.attachEvents();
    return Popup.instances[this.name] = this;
  };
  Popup.version = '2.2.1';
  Popup.instances = {};
  Popup.isOpen = false;
  Popup.prototype.appendToDOM = function(targetEl$) {
    this.el.prependTo(document.body);
    return targetEl$.first().appendTo(this.contentEl);
  };
  Popup.prototype.centerPopup = function() {
    var contentHeight, offset, windowHeight;
    contentHeight = this.contentEl[0].clientHeight;
    windowHeight = window.innerHeight;
    if (contentHeight >= windowHeight - 80) {
      offset = 100;
    } else {
      offset = (windowHeight - contentHeight) / 2;
    }
    return this.contentEl[0].style.margin = offset + "px auto";
  };
  Popup.prototype.attachEvents = function() {
    this.closeEl.add(this.overlayEl).on('click', (function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    $(document).on("keyup." + this.name, (function(_this) {
      return function(event) {
        if (event.which === 27 && _this.isOpen && _this.options.closeOnEsc) {
          event.stopPropagation();
          event.preventDefault();
          return _this.close();
        }
      };
    })(this));
    if (this.options.centerPopup) {
      return $(window).on("resize." + this.name, (function(_this) {
        return function() {
          if (_this.isOpen) {
            return _this.centerPopup();
          }
        };
      })(this));
    }
  };
  Popup.prototype.detachEvents = function() {
    this.overlayEl.off("click." + this.name);
    $(document).off("keyup." + this.name);
    return $(window).off("resize." + this.name);
  };
  Popup.prototype.close = function() {
    if (this.isOpen) {
      this.el.removeClass('show').addClass('hiding');
      this.el[0].style = styles.popup;
      setTimeout((function(_this) {
        return function() {
          _this.el.removeClass('hiding');
          bodyWrapper$[0].style = '';
          return window.scroll(0, _this.scrollOffset + getDocumentOffset());
        };
      })(this), 400);
      $(document.body).removeClass('_popupOpen');
      Popup.isOpen = this.isOpen = false;
      return this.el.trigger('closed');
    }
  };
  Popup.prototype.open = function() {
    if (!Popup.isOpen || this.isExitIntent) {
      if (this.isExitIntent) {
        $('.popup').removeClass('show');
      }
      if (this.el.find('.results').hasClass('show')) {
        this.el.addClass('show');
      } else {
        this.el.addClass('show').find('.step').first().addClass('show');
      }
      this.scrollOffset = getScrollOffset();
      this.el[0].style = stylesOpenState.popup;
      bodyWrapper$[0].style = stylesOpenState.bodyWrapper.replace('{{topOffset}}', 0 - this.scrollOffset);
      if (this.options.centerPopup) {
        this.centerPopup();
      }
      setTimeout(function() {
        return window.scroll(0, 0);
      });
      $(document.body).addClass('_popupOpen');
      Popup.isOpen = this.isOpen = true;
      return this.el.trigger('opened');
    }
  };
  Popup.prototype.reset = function() {
    if (this.form) {
      this.form.Restart(true, true);
    }
    return this.el.trigger('reset');
  };
  Popup.prototype.destroy = function() {
    this.close();
    this.detachEvents();
    this.el.remove();
    return delete Popup.instances[this.name];
  };
  Popup.prototype.replaceWith = function(el$) {
    return this.contentEl.html(el$);
  };
  Popup.prototype.Open = Popup.prototype.open;
  Popup.prototype.Close = Popup.prototype.close;
  Popup.prototype.Reset = Popup.prototype.reset;
  Popup.prototype.restart = Popup.prototype.reset;
  Popup.prototype.Destroy = Popup.prototype.destroy;
  $(document.body).wrapInner(markup.bodyWrapper);
  bodyWrapper$ = $(document.body).children('.bodyInnerwrap');
  return window.Popup = Popup;
})(jQuery);
